SM_FUNCS_SCRIPT=$(realpath "${BASH_SOURCE[0]}")
SM_FUNCS_DIR=$(dirname "$SM_FUNCS_SCRIPT")

# Get the public key of a repo
#  argument: repository of form ORG/REPOSITORY
getRepoPubKey () {
  local repo
  repo=$1
  local REPOPUBKEY
  # echo "getRepoPubKey $repo"
  REPOPUBKEY=$(curl --no-progress-meter -f -L \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer ${API_KEY}" \
  -H "X-GitHub-Api-Version: 2022-11-28" \
  https://api.github.com/repos/${repo}/actions/secrets/public-key)
  echo "${REPOPUBKEY}"
}


# set a repository secret
#  arguments: REPO (of form ORG/REPO)
#             SECRET_NAME (string)
#             SECRET VALUE (string)
setRepoSecret () {
  local repo
  local secret_name
  local secret_value
  repo=$1
  secret_name=$2
  secret_value=$3

  pubkeyJson="$(getRepoPubKey "$repo")"  
  local key_id=$(echo "${pubkeyJson}" | jq -r .key_id)
  local key="$(echo "$pubkeyJson" | jq -r .key)"  
  local secret_encrypted="$("${SM_FUNCS_DIR}/libsodium_enc.sh" "${key}" "${secret_value}")"

  #echo "key_id: ${key_id}"
  #echo "key: ${key}"
  #echo "enc: ${secret_encrypted}"  
  echo "setRepoSecret [$secret_name] on $repo "
  local RESULT=$(curl --no-progress-meter -f -L \
    -X PUT \
    -H "Accept: application/vnd.github+json" \
    -H "Authorization: Bearer ${API_KEY}" \
    -H "X-GitHub-Api-Version: 2022-11-28" \
    https://api.github.com/repos/${repo}/actions/secrets/${secret_name} \
    -d '{"encrypted_value":"'"${secret_encrypted}"'","key_id":"'"${key_id}"'"}')
  echo $RESULT
}

# Function to update or add an entry to the JSON file
update_json_entries() {
  local json_file="$1"
  local organization="$2"
  local repository="$3"
  local current_date=$(date +%Y-%m-%d)

  # Check if jq is installed
  if ! command -v jq &> /dev/null; then
    echo "Error: jq is not installed. Please install it to process JSON."
    return 1
  fi

  # Check if the JSON file exists
  if [ ! -f "$json_file" ]; then
    echo "Creating new JSON file: $json_file"
    echo '[]' > "$json_file"
  fi

  # Read the current JSON data
  local json_data=$(cat "$json_file")

  # Check if the JSON data is empty or invalid
  if [ -z "$json_data" ] || ! jq -e '.' <<< "$json_data" &> /dev/null; then
    echo "Warning: JSON file is empty or invalid. Resetting to an empty array."
    echo '[]' > "$json_file"
    json_data='[]'
  fi

  # Construct the updated entry
  local updated_entry='{"organization": "'"$organization"'", "repository": "'"$repository"'", "last-updated": "'"$current_date"'"}'

  # Use jq to update or add the entry
  echo "$json_data" | jq --argjson updated "$updated_entry" '
    . as $entries
    | if any($entries[]; .organization == $updated.organization and .repository == $updated.repository) then
      map(if .organization == $updated.organization and .repository == $updated.repository then $updated else . end)
    else
      $entries + [$updated]
    end
  ' > "$json_file.tmp"
  mv "$json_file.tmp" "$json_file"

  if echo "$json_data" | jq -e ".[] | select(.organization == \"$organization\" and .repository == \"$repository\")"; then
    echo "Updated entry for organization: '$organization', repository: '$repository'"
  else
    echo "Added new entry for organization: '$organization', repository: '$repository'"
  fi
}



function check_python_dependencies() {
  # Check if python3 is installed
  if ! command -v python3 &> /dev/null; then
    echo "Error: python3 is not installed. Please install it."
    exit 1
  fi

  # Check if pip3 is installed (package installer for Python)
  if ! command -v pip3 &> /dev/null; then
    echo "Error: pip3 is not installed. Please install it (usually part of python3-pip package)."
    exit 1
  fi

  # Attempt to import the required libraries
python3 -c "try:
    from base64 import b64encode
    from nacl import encoding, public
    import sys
except ImportError as e:
    print(f'Error: Missing Python dependencies: {e}')
    exit(1)
"
}

# check for python dependencies
check_python_dependencies