#! /bin/bash

# this script is sourced, so do not set to exit on error.
#
#  This file supports both a simulated automation mode where the directory you start the docker
#  image from is copied to the $HOME/work folder in the image, and a mode where your local
#  directory is mounted into the docker container at a mount point (in that case, source kosbuilder-developer.env.source)
#
#  You must supply SECRETID to this script to the name of the secrets in, as defined in 
#  ${THIS_SCRIPT_DIR}/secrets/secret-detail/secrets-*.json.  The password is defined in that file


THIS_SCRIPT=$(realpath "${BASH_SOURCE[0]}")
THIS_SCRIPT_DIR=$(dirname "$THIS_SCRIPT")

source "${THIS_SCRIPT_DIR}/secrets/sm_funcs.source"

if [ "${SECRETID}" == "" ]; then
  echo "define SECRETID to the organization before sourcing this script."
  echo "available organizations:"
  getSecretsIds
  for n in "${SECRET_NAMES_ARRAY[@]}"; do
    echo "  $n"
  done
else
  SECRET_DETAIL_FILENAME="$(getSecretDetailFilename "${SECRETID}")"
  if [ ! -f "${SECRET_DETAIL_FILENAME}" ]; then
    echo "ERROR: secret detail file not found, ${SECRET_DETAIL_FILENAME}"
    return 1
  fi
  export KOSBUILD_SECRET_PASSWORD="$(jq -r .password "${SECRET_DETAIL_FILENAME}")"
  if [ "$KOSBUILD_SECRET_PASSWORD" == "null" ]; then 
    echo "ERROR: empty password for secrets"
    return 1
  fi

  SECRETS_MOUNT="$(getSecretsMountPath "${SECRETID}")"
  SECRETS_FILENAME="$(getEncryptedSecretsFilename "${SECRETID}")"
  if [ -f "${SECRETS_FILENAME}" ]; then
    cp "${SECRETS_FILENAME}" "${SECRETS_MOUNT}/secrets.7z"
  else
    echo "Encrypted secrets file not found (${SECRETS_FILENAME})"
    echo "be sure to run make_secrets_file.sh to generate your secrets file"
    return 1
  fi

  if [ "$KOSBUILDER_DEV" == "1" ]; then
    DOCKER_IMAGE_NAME=kosbuilder-developer
  else
    KOSBUILDER_DEV=0
    DOCKER_IMAGE_NAME=kosbuilder
    KOSBUILD_USER_ARG=
  fi

  # we were going to use a simple alias
  alias kosbuild="docker run -it --rm ${KOSBUILD_USER_ARG} -e KOSBUILDER_DEV=$KOSBUILDER_DEV -e KOSBUILD_SECRET_PASSWORD=${KOSBUILD_SECRET_PASSWORD} ${KOSBUILD_VOLUME_MOUNT_ARG} -v "'`pwd`'":/app -v ${SECRETS_MOUNT}:/mnt/secrets ${DOCKER_IMAGE_NAME}"
  alias kosbuild_debug="docker run -it --rm ${KOSBUILD_USER_ARG} -e KOSBUILDER_DEV=$KOSBUILDER_DEV -e KOSDEBUG=1 -e KOSBUILD_SECRET_PASSWORD=${KOSBUILD_SECRET_PASSWORD} ${KOSBUILD_VOLUME_MOUNT_ARG} -v "'`pwd`'":/app -v ${SECRETS_MOUNT}:/mnt/secrets ${DOCKER_IMAGE_NAME}"

  # prefix the bash prompt with "kosbuilder-developer-env"
  if [[ $PS1 != *${DOCKER_IMAGE_NAME}-env* ]]; then
     export ORIG_PS1=$PS1
     export PS1="(${DOCKER_IMAGE_NAME}-env) $PS1"
  fi
fi
