#! /bin/bash

# this script is sourced, so do not set to exit on error.
#
#  This file supports both a simulated automation mode where the directory you start the docker
#  image from is copied to the $HOME/work folder in the image, and a mode where your local
#  directory is mounted into the docker container at a mount point (in that case, source kosbuilder-developer.env.source)
#
#  You should supply SECRETID to this script to the name of the secrets identifierfound in 
#  ${THIS_SCRIPT_DIR}/secrets/${SECRETID}-secrets.7z.  (the password should also be in 
#  ${THIS_SCRIPT_DIR}/secrets/${SECRETID}/secrets_password)
#

THIS_SCRIPT=$(realpath "${BASH_SOURCE[0]}")
THIS_SCRIPT_DIR=$(dirname "$THIS_SCRIPT")

if [ "${SECRETID}" == "" ]; then
  echo "define SECRETID to the organization before sourcing this script."
  echo "available organizations:"
  pushd "${THIS_SCRIPT_DIR}/secrets" > /dev/null
  find . -maxdepth 1 -mindepth 1 -type d ! -name '.' ! -name 'secrets_mount' | sed 's|\./||'
  popd  > /dev/null
else

  # SECRETS_MOUNT defines the location for kosbuilder to find the secrets.7z file
  SECRETS_MOUNT=${THIS_SCRIPT_DIR}/secrets/secrets_mount
  cp "${SECRETS_MOUNT}/${SECRETID}-secrets.7z" "${SECRETS_MOUNT}/secrets.7z"

  # KOSBUILD_SECRET_PASSWORD defines the password the the secrets.7z file
  export KOSBUILD_SECRET_PASSWORD=$(cat "${THIS_SCRIPT_DIR}/secrets/${SECRETID}/secrets_password")

  if [ "$KOSBUILDER_DEV" == "1" ]; then
    DOCKER_IMAGE_NAME=kosbuilder-developer
  else
    KOSBUILDER_DEV=0
    DOCKER_IMAGE_NAME=kosbuilder
    KOSBUILD_USER_ARG=
  fi

  # we were going to use a simple alias
  alias kosbuild="docker run -it --rm ${KOSBUILD_USER_ARG} -e KOSBUILDER_DEV=$KOSBUILDER_DEV -e KOSBUILD_SECRET_PASSWORD=${KOSBUILD_SECRET_PASSWORD} ${KOSBUILD_VOLUME_MOUNT_ARG} -v "'`pwd`'":/app -v ${SECRETS_MOUNT}:/mnt/secrets ${DOCKER_IMAGE_NAME}"
  alias kosbuild_debug="docker run -it --rm ${KOSBUILD_USER_ARG} -e KOSBUILDER_DEV=$KOSBUILDER_DEV -e KOSDEBUG=1 -e KOSBUILD_SECRET_PASSWORD=${KOSBUILD_SECRET_PASSWORD} ${KOSBUILD_VOLUME_MOUNT_ARG} -v "'`pwd`'":/app -v ${SECRETS_MOUNT}:/mnt/secrets ${DOCKER_IMAGE_NAME}"

  # prefix the bash prompt with "kosbuilder-developer-env"
  if [[ $PS1 != *${DOCKER_IMAGE_NAME}-env* ]]; then
     export ORIG_PS1=$PS1
     export PS1="(${DOCKER_IMAGE_NAME}-env) $PS1"
  fi
fi
